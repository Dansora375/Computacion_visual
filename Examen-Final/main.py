"""
Sistema de Detecci√≥n de Postura Corporal en Tiempo Real
Integra detecci√≥n de postura con visualizaci√≥n 3D interactiva y estad√≠sticas

Autor: Sistema de An√°lisis Postural
Fecha: Julio 2025
"""

import cv2
import time
import threading
from posture_detector import PostureDetector
from pose_3d_visualizer import Pose3DVisualizer
from posture_statistics import PostureStatistics
from dashboard import PostureDashboard

class PostureAnalysisSystem:
    def __init__(self):
        """
        Inicializa el sistema completo de an√°lisis postural
        """
        self.detector = PostureDetector()
        self.visualizer = Pose3DVisualizer()
        self.statistics = PostureStatistics()
        self.dashboard = PostureDashboard(self.statistics, self)  # Pasar referencia de self
        self.camera = None
        self.running = False
        self.camera_paused = False  # Nuevo estado para pausar c√°mara
        
        # Variables de estado
        self.bad_posture_detected = False
        self.bad_posture_start_time = None
        self.warning_delay = 3.0  # segundos antes de mostrar advertencia
        
    def setup_camera(self, camera_index=0):
        """
        Configura la c√°mara
        Args:
            camera_index: √çndice de la c√°mara (0 para c√°mara por defecto)
        """
        self.camera = cv2.VideoCapture(camera_index)
        
        if not self.camera.isOpened():
            raise Exception("No se pudo abrir la c√°mara")
        
        # Configurar resoluci√≥n
        self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        
        print("C√°mara configurada correctamente")
    
    def draw_posture_info(self, image, is_bad_posture, posture_issues, calibration_status):
        """
        Dibuja informaci√≥n de postura en la imagen incluyendo estado de calibraci√≥n
        """
        height, width = image.shape[:2]
        
        # === CALIBRACI√ìN ===
        if calibration_status['calibrating']:
            color = (0, 255, 255)  # Amarillo
            status = f"CALIBRANDO... {calibration_status['progress']:.0f}%"
            
            # Dibujar barra de progreso
            bar_width = 280
            bar_height = 10
            progress_width = int((calibration_status['progress'] / 100) * bar_width)
            
            # Fondo de la barra
            cv2.rectangle(image, (10, 60), (10 + bar_width, 60 + bar_height), (100, 100, 100), -1)
            # Progreso
            cv2.rectangle(image, (10, 60), (10 + progress_width, 60 + bar_height), color, -1)
            
            # Instrucciones de calibraci√≥n
            cv2.putText(image, "Mant√©n POSTURA CORRECTA por 2 segundos", (10, 90), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            cv2.putText(image, "‚Ä¢ Espalda recta ‚Ä¢ Hombros relajados", (10, 115), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
            cv2.putText(image, "‚Ä¢ Cabeza alineada ‚Ä¢ Sin encorvarse", (10, 135), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
        
        # === AN√ÅLISIS DE POSTURA ===
        else:
            # Determinar color y mensaje
            if is_bad_posture:
                color = (0, 0, 255)  # Rojo
                status = "MALA POSTURA"
                
                # Mostrar problemas espec√≠ficos
                y_offset = 60
                for issue in posture_issues:
                    cv2.putText(image, f"‚Ä¢ {issue}", (10, y_offset), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
                    y_offset += 25
                    
            else:
                color = (0, 255, 0)  # Verde
                status = "POSTURA CORRECTA"
        
        # Dibujar rect√°ngulo de estado principal
        cv2.rectangle(image, (10, 10), (300, 50), color, -1)
        cv2.putText(image, status, (20, 35), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
        
        # Agregar informaci√≥n de estad√≠sticas (solo si no est√° calibrando)
        if not calibration_status['calibrating']:
            stats = self.statistics.get_statistics_summary()
            
            # Mostrar estad√≠sticas b√°sicas en la esquina superior derecha
            stats_y = 20
            cv2.putText(image, f"Sesion: {stats['session_duration_formatted']}", 
                       (width - 200, stats_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(image, f"Buena: {stats['good_percentage']:.1f}%", 
                       (width - 200, stats_y + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            cv2.putText(image, f"Mala: {stats['bad_percentage']:.1f}%", 
                       (width - 200, stats_y + 40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
            cv2.putText(image, f"Alertas: {stats['alert_count']}", 
                       (width - 200, stats_y + 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)
        
        # Instrucciones generales
        cv2.putText(image, "Presiona 'q' para salir, 's' para estadisticas", (10, height - 40), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        cv2.putText(image, "Presiona 'r' para reiniciar estadisticas", (10, height - 20), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        return image
    
    def handle_bad_posture(self):
        """
        Maneja la detecci√≥n de mala postura con control de ventana mejorado
        """
        current_time = time.time()
        
        if self.bad_posture_start_time is None:
            self.bad_posture_start_time = current_time
        
        # Si ha pasado el tiempo de espera
        if (current_time - self.bad_posture_start_time) > self.warning_delay:
            # Si la ventana no est√° abierta Y se permite apertura autom√°tica
            if not self.visualizer.is_open() and self.visualizer.allow_auto_open:
                print("‚ö†Ô∏è  Mala postura detectada por m√°s de 3 segundos")
                print("üîÑ Abriendo visualizaci√≥n 3D de postura correcta...")
                self.visualizer.show_in_thread()
                # Registrar alerta en estad√≠sticas
                self.statistics.log_alert_opened()
    
    def handle_good_posture(self):
        """
        Maneja la detecci√≥n de buena postura y reinicia temporizador si fue cerrada manualmente
        """
        # Si hab√≠a mala postura antes y ahora est√° bien, permitir reapertura
        if self.bad_posture_start_time is not None:
            self.visualizer.allow_reopen()
        
        self.bad_posture_start_time = None
    
    def pause_camera_and_show_stats(self):
        """Pausa la c√°mara y muestra las estad√≠sticas"""
        self.camera_paused = True
        
        # Cerrar la ventana de OpenCV
        cv2.destroyAllWindows()
        
        # Abrir dashboard
        self.dashboard.show()
        print("üìä C√°mara pausada, dashboard abierto")
    
    def resume_camera_detection(self):
        """Reanuda la detecci√≥n con c√°mara"""
        self.camera_paused = False
        print("üì∑ C√°mara reanudada, continuando detecci√≥n...")
    
    def run(self):
        """
        Ejecuta el bucle principal del sistema con calibraci√≥n inicial
        """
        print("üöÄ Iniciando Sistema de An√°lisis Postural MEJORADO")
        print("üì∑ Configurando c√°mara...")
        
        try:
            self.setup_camera()
        except Exception as e:
            print(f"‚ùå Error configurando c√°mara: {e}")
            return
        
        print("‚úÖ Sistema listo!")
        print("üí° Si√©ntate frente a la c√°mara en POSTURA CORRECTA")
        print("üìè Mant√©n una distancia de 60-100cm de la c√°mara")
        print("üéØ El sistema se calibrar√° autom√°ticamente en 2 segundos")
        print("‚ö†Ô∏è  Despu√©s, detectar√° cambios en tu postura")
        print("=" * 60)
        
        # Iniciar calibraci√≥n
        self.detector.start_calibration()
        
        # Iniciar estad√≠sticas
        self.statistics.start_session()
        
        self.running = True
        frame_count = 0
        
        try:
            while self.running:
                # Si la c√°mara est√° pausada, esperar
                if self.camera_paused:
                    cv2.waitKey(100)  # Esperar 100ms y verificar de nuevo
                    continue
                
                # Capturar frame
                ret, frame = self.camera.read()
                if not ret:
                    print("‚ùå Error capturando frame")
                    break
                
                # Espejo horizontal para mayor naturalidad
                frame = cv2.flip(frame, 1)
                
                # Detectar postura con nuevo sistema
                processed_frame, is_bad_posture, posture_issues, calibration_status = self.detector.detect_posture(frame)
                
                # Actualizar estad√≠sticas (solo si no est√° calibrando)
                if not calibration_status['calibrating']:
                    self.statistics.update_posture_state(not is_bad_posture, posture_issues)
                
                # Dibujar informaci√≥n en la imagen
                display_frame = self.draw_posture_info(processed_frame, is_bad_posture, posture_issues, calibration_status)
                
                # Solo manejar postura si ya est√° calibrado
                if not calibration_status['calibrating']:
                    if is_bad_posture:
                        self.handle_bad_posture()
                    else:
                        self.handle_good_posture()
                
                # Mostrar frame
                cv2.imshow('An√°lisis de Postura Corporal - SISTEMA MEJORADO', display_frame)
                
                # Control de FPS y salida
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    print("üëã Saliendo del sistema...")
                    break
                elif key == ord('s'):
                    print("üìä Pausando c√°mara y abriendo estad√≠sticas...")
                    self.pause_camera_and_show_stats()
                elif key == ord('r'):
                    print("üîÑ Reiniciando estad√≠sticas...")
                    self.statistics.reset_session()
                    self.statistics.start_session()
                
                frame_count += 1
                
                # Debug info solo despu√©s de calibraci√≥n
                if frame_count % 30 == 0 and not calibration_status['calibrating']:
                    status = "‚ùå MALA" if is_bad_posture else "‚úÖ BUENA"
                    print(f"Frame {frame_count}: Postura {status}")
                    if posture_issues:
                        for issue in posture_issues:
                            print(f"  - {issue}")
                
                # Mostrar cuando calibraci√≥n se complete
                if calibration_status['complete'] and frame_count == 1:
                    print("üéâ ¬°Calibraci√≥n completada! Ahora detectando cambios de postura...")
        
        except KeyboardInterrupt:
            print("\nüõë Interrumpido por usuario")
        
        except Exception as e:
            print(f"‚ùå Error durante ejecuci√≥n: {e}")
        
        finally:
            self.cleanup()
    
    def cleanup(self):
        """
        Limpia recursos al finalizar
        """
        print("üßπ Limpiando recursos...")
        
        self.running = False
        
        # Finalizar sesi√≥n de estad√≠sticas y mostrar resumen
        if self.statistics:
            self.statistics.end_session()
            self.statistics.print_summary()
            
            # Exportar autom√°ticamente
            try:
                export_path = self.statistics.export_to_csv()
                print(f"üìÑ Estad√≠sticas exportadas autom√°ticamente: {export_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error exportando estad√≠sticas: {e}")
        
        if self.camera:
            self.camera.release()
        
        cv2.destroyAllWindows()
        
        if self.visualizer:
            self.visualizer.close()
        
        if self.dashboard:
            self.dashboard.close()
        
        print("‚úÖ Limpieza completada")

def main():
    """
    Funci√≥n principal
    """
    print("=" * 70)
    print("üéØ SISTEMA DE DETECCI√ìN DE POSTURA CORPORAL - VERSI√ìN MEJORADA")
    print("=" * 70)
    print("üìã FUNCIONALIDADES:")
    print("   ‚Ä¢ üéØ Calibraci√≥n autom√°tica de postura correcta personal")
    print("   ‚Ä¢ üìê An√°lisis avanzado con √°ngulos y coordenadas 3D")
    print("   ‚Ä¢ üîç Detecci√≥n precisa de m√∫ltiples problemas posturales")
    print("   ‚Ä¢ üïí Filtrado temporal para evitar falsos positivos")
    print("   ‚Ä¢ üìä Sistema de estad√≠sticas y dashboard interactivo")
    print("   ‚Ä¢ ÔøΩ Exportaci√≥n autom√°tica de datos en CSV")
    print("=" * 70)
    print("üìñ INSTRUCCIONES:")
    print("   1. Si√©ntate con POSTURA CORRECTA al iniciar")
    print("   2. El sistema se calibrar√° autom√°ticamente (2 segundos)")
    print("   3. Despu√©s detectar√° cambios en tu postura")
    print("   4. Mant√©n espalda recta, hombros relajados, cabeza alineada")
    print("=" * 70)
    print("üéÆ CONTROLES:")
    print("   ‚Ä¢ 'q' - Salir del sistema")
    print("   ‚Ä¢ 's' - Pausar c√°mara y abrir estad√≠sticas")
    print("   ‚Ä¢ 'r' - Reiniciar estad√≠sticas de la sesi√≥n")
    print("   ‚Ä¢ En estad√≠sticas: 'Volver a Camara' - Reanudar detecci√≥n")
    print("=" * 70)
    
    # Crear y ejecutar sistema
    system = PostureAnalysisSystem()
    
    try:
        system.run()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
    
    print("üèÅ Programa terminado")

if __name__ == "__main__":
    main()
